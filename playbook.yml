---
- name: Install host 1
  hosts: host1
  become: true
  handlers:
    - name: Restart postgresql
      systemd:
        name: postgresql
        state: restarted
  tasks:
    - name: Install a list of packages
      apt:
        pkg:
          - postgresql
          - postgresql-contrib
          - python3
          - python3-pip
          - python3-venv
          - git
        state: present
    - name: Clone a repo from github
      git:
        repo: "{{ hostvars[inventory_hostname]['GIT'] }}"
        dest: "{{ hostvars[inventory_hostname]['WORKDIR'] }}"
        version: main
    - name: Install specified python requirements
      pip:
        requirements: "{{ hostvars[inventory_hostname]['WORKDIR'] }}/bot/requirements.txt"
    - name: Add new configuration to "postgresql.conf"
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/postgresql.conf"
        block: |
          listen_addresses = '*'
          port = {{ hostvars[inventory_hostname]['DB_PORT'] }}
          wal_level=replica
          hot_standby=on
          max_wal_senders=10
          max_replication_slots=10
          hot_standby_feedback=on
          log_replication_commands=on
    - name: Add new configuration to "pg_hba.conf"
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/pg_hba.conf"
        block: |
          local all postgres peer
          host replication all {{ hostvars[inventory_hostname]['ansible_host'] }}/24 scram-sha-256
          host all all {{ hostvars[inventory_hostname]['ansible_host'] }}/32 trust
      notify: Restart postgresql
      become: true
    - name: Copy file init.sql to tmp
      copy:
        src: init.sql
        dest: /tmp/init.sql
        owner: postgres
        group: postgres
        mode: '0644'
    - name: Replace DB name
      replace:
        path: /tmp/init.sql
        regexp: "DB_DATABASE"
        replace: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
    - name: Replace DB user
      replace:
        path: /tmp/init.sql
        regexp: "DB_USER"
        replace: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
    - name: Replace DB replication user
      replace:
        path: /tmp/init.sql
        regexp: "DB_REPL_USER"
        replace: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"
    - name: Replace DB replication password
      replace:
        path: /tmp/init.sql
        regexp: "DB_REPL_PASSWORD"
        replace: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"
    - name: Replace DB password
      replace:
        path: /tmp/init.sql
        regexp: "DB_PASSWORD"
        replace: "{{ hostvars[inventory_hostname]['DB_PASSWORD'] }}"
    - name: Running init.sql
      command: /usr/bin/psql -a -f /tmp/init.sql
      become: true
      become_user: postgres
- name: Install host 2
  hosts: host2
  become: true
  handlers:
    - name: Restart postgresql
      systemd:
        name: postgresql
        state: restarted
  tasks:
    - name: Install a list of packages
      apt:
        pkg:
          - postgresql
          - postgresql-contrib
          - python3
          - python3-pip
          - python3-venv
          - git
        state: present
    - name: Add new replica configuration to "postgresql.conf"
      blockinfile:
       path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/postgresql.conf"
       block: |
          listen_addresses = '*'
          port = {{ hostvars[inventory_hostname]['DB_REPL_PORT'] }}
      notify: Restart postgresql
      become: true
      become_user: postgres
    - name: Remove data Postgresql 
      command: "rm -rf /var/lib/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}"
      become: true
      become_user: postgres
    - name: Get data pg_basebackup
      command: pg_basebackup -h {{ hostvars[inventory_hostname]['DB_HOST'] }} -D /var/lib/postgresql/{{hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/ -p {{ hostvars[inventory_hostname]['DB_PORT'] }} -U {{ hostvars[inventory_hostname]['DB_REPL_USER'] }}
      environment:
        PGUSER: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"
        PGPASSWORD: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"
      become: true
      become_user: postgres
    - name: Directory /var/lib/postgresql permissions
      command: chown -R postgres:postgres /var/lib/postgresql/
      become: true
      become_user: postgres

- name: Starting bot
  hosts: host1  
  become: true
  tasks:
    - name: Start bot
      command: python3 {{ hostvars[inventory_hostname]['WORKDIR'] }}/bot/start.py
      environment:
        TOKEN: "{{ hostvars[inventory_hostname]['TOKEN'] }}"
        RM_HOST: "{{ hostvars[inventory_hostname]['RM_HOST'] }}"
        RM_PORT: "{{ hostvars[inventory_hostname]['RM_PORT'] }}"
        RM_USER: "{{ hostvars[inventory_hostname]['RM_USER'] }}"
        RM_PASSWORD: "{{ hostvars[inventory_hostname]['RM_PASSWORD'] }}"
        DB_HOST: "{{ hostvars[inventory_hostname]['DB_HOST'] }}"
        DB_PORT: "{{ hostvars[inventory_hostname]['DB_PORT'] }}"
        DB_USER: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
        DB_PASSWORD: "{{ hostvars[inventory_hostname]['DB_PASSWORD'] }}"
        DB_DATABASE: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"

